cor(x11, x22, method = "pearson", use = "complete.obs")
cor(x11, x22, method = "pearson")
50134*0.015
50134*0.015/12
50634*0.015/12
100000*0.015/12
1000000*0.015/12
2000000*0.015/12
3000000*0.015/12
4000000*0.015/12
q()
fn <- "sftp://seaborgium/home/oleg/Documents/dbase/lincs/GSE92742/GSE92742_Broad_LINCS_gene_info_delta_landmark.txt.gz"
endsWith(fn "landmark.txt.gz")
endsWith(fn, "landmark.txt.gz")
q()
library(data.table)
dt <- data.table(id = 1:10, val = c(LETTERS[1:7], NA, NA, NA))
dt
dt[id == 3]
dt[id == 3 & val == NA]
dt[id == 8 & val == NA]
dt[id == 8 & val == NA]
dt[id == 8 & val == NA]
dt[id == 8 & is.na(val)]
dt <- fread("~/tmp/lincs.dc.rmsd.tsv", header = T, sep = "\t", na.strings = "NA")
dt
dt[order(-pearson.cor)]
dt[order(-ruzicka)]
dt[order(ruzicka)]
dt[order(rmsd.norm)]
dt[order(rmsd.norm)][1:20]
dt[, unique(dc_id.1)]
q()
shiny::runApp('workspace/shiny/lincs')
input$dt_rows_selected
drug2
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
dt.sel
dt.sel
colnames(dt.sel)[as.integer(input$metric) + 1]
input$metric
ggplot(dt.sel, aes(x = cell_id, y = pearson.cor)) + geom_col
ggplot(dt.sel, aes(x = cell_id, y = pearson.cor)) + geom_col()
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
metric.choices <- list("Pearson correlation" = 5, "Euclidean distance" = 4, "Normalized RMSD" = 3, "RMSD" = 2)
metric.choices
metric.choices[[1]]
metric.choices == 5
metric.choices == "5"
names(metric.choices)
names(metric.choices)[metric.choices == "5"]
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
tools::toTitleCase("tedizolid")
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
runApp('workspace/shiny/lincs')
remove.packages(ggiraph())
remove.packages(ggiraph)
remove.packages("ggiraph")
remove.packages("ggiraph")
remove.packages("ggiraph")
remove.packages("ggiraph")
remove.packages("ggiraph")
devtools::install_github('davidgohel/ggiraph')
q()
3799+112+239+294
4532-3825-115-283
14.22/6
10427+3398
17166-14220
17166-12534
4532+64911
4532+1669
q()
library(XML)
library(data.table)
q()
remove.packages("yaml")
remove.packages("yaml")
q()
install.packages("yaml")
q()
library(XML)
remove.packages("XML")
install.packages("XML")
library(data.table)
remove.packages("data.table")
remove.packages(c("data.table","RSQLite","readxl"))
remove.packages(c("data.table","RSQLite","readxl"))
install.packages(c("data.table","RSQLite","readxl"))
q()
install.packages("XML")
install.packages("XML")
library(XML)
install.packages("data.table")
library(data.table)
install.packages("readxl")
library(readxl)
install.packages("RSQLite")
q()
install.packages("shiny")
install.packages("httpuv")
q()
library(shiny)
q()
install.packages("RJDBC")
library(RJDBC)
install.packages("RPostgres")
library(RPostgres)
q()
library(data.table)
q()
.libPaths()
q()
devtools::install_github("zachcp/chemdoodle")
install.packages("devtools")
devtools::install_github("zachcp/chemdoodle")
library(chemdoodle)
chemdoodle_viewer("C1CCCCC1", width = 100, height = 100)
mol <- "\n  Mrv1718005061812352D          \n\n  6  6  0  0  0  0            999 V2000\n   -2.2421    0.1504    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9565   -0.2621    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.9565   -1.0871    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -2.2421   -1.4996    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5276   -1.0871    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n   -1.5276   -0.2621    0.0000 C   0  0  0  0  0  0  0  0  0  0  0  0\n  1  2  1  0  0  0  0\n  2  3  2  0  0  0  0\n  3  4  1  0  0  0  0\n  4  5  2  0  0  0  0\n  5  6  1  0  0  0  0\n  1  6  2  0  0  0  0\nM  END\n"
mol
chemdoodle_viewer(mol, width = 100, height = 100)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, scale = 4)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, scale = 5)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, scale = 0.2)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, scale = 100)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, atoms_usePYMOLColors = T)
chemdoodle_viewer("C1CCCCC1", width = 400, height = 200, atoms_usePYMOLColors = T)
chemdoodle_viewer("C1CCCCC1O", width = 400, height = 200, atoms_usePYMOLColors = T)
chemdoodle_viewer("C1CCCCC1O", atoms_usePYMOLColors = T)
?parse.smiles()
con <- textConnection(mol)
fn <- textConnectionValue(con)
con <- textConnection(mol, local = T)
con
cdk.version()
showConnections()
close(con)
showConnections()
close(3)
close("3")
showConnections()
close(con)
fn <- tempfile()
unlink(fn)
fn <- tempfile(fileext = "mol")
fb
fn
unlink(fn)
fn <- tempfile(fileext = ".mol")
fn
?cat
cat(mol, fn)
unlink(fn)
cat(mol, tempfile(fileext = ".mol"))
fn <- tempfile(fileext = ".mol")
cat(mol, file = fn)
fn
m <- load.molecules(fn)
m
process_molecule <- function(mol){
#atom and bond info
atoms = get.atoms(mol)
bonds = get.bonds(mol)
atomhashes <- sapply(atoms, FUN=function(x){x$hashCode()})
process_atom <- function(atom){
coord <- atom$getPoint2d()
x = coord$x
y = coord$y
data.frame(x = coord$x,
y = coord$y,
l = atom$getSymbol())
}
process_bond <- function(bond, mol= mol){
order <- bond$getOrder()$ordinal() + 1
bondatoms <- get.atoms(bond)
source_atom = bondatoms[[1]]
target_atom = bondatoms[[2]]
data.frame(o = order,
b = which(atomhashes == source_atom$hashCode()) - 1,
e = which(atomhashes == target_atom$hashCode()) - 1)
}
atomdata = Reduce(rbind, Map(process_atom, atoms))
bonddata = Reduce(rbind, Map(process_bond, bonds))
list(b = bonddata, a = atomdata )
}
mjson <- process_molecule(m)
class(m)
m[[1]]
class(m[[1]])
class(m[[1]]@jclass)
mjson <- process_molecule(m[[1]])
mjson
chemdoodle_viewer <- function(mjson,
width = 500,
height = 500,
bondscale=14.4,
#canvas settings
backgroundColor="white",
scale= 1,
#atom settings
atoms_font_size_2D = 12,
atoms_font_families_2D = c("Helvetica", "Arial", "Dialog"),
atoms_font_italic_2D= FALSE,
atoms_circleDiameter_2D = 10,
atoms_useJMOLColors = FALSE,
atoms_usePYMOLColors = FALSE,
atoms_implicitHydrogens_2D = TRUE,
atoms_displayTerminalCarbonLabels_2D = TRUE,
atoms_displayAllCarbonLabels_2D = FALSE,
# bond specifications
bonds_display = TRUE,
bonds_width_2D = 1,
bonds_saturationWidth_2D = 0.2,
bonds_ends_2D = "round",
bonds_useJMOLColors = FALSE,
bonds_usePYMOLColors = FALSE,
bonds_wedgeThickness_2D = 0.22,
bonds_hashWidth_2D = 1) {
# forward options using x
x = list(
width = width,
height = height,
json = mjson,
bondscale = bondscale,
backgroundColor="white",
scale = scale,
atoms_font_size_2D = atoms_font_size_2D,
atoms_font_families_2D =atoms_font_families_2D,
atoms_font_italic_2D = atoms_font_italic_2D,
atoms_circleDiameter_2D = atoms_circleDiameter_2D,
atoms_useJMOLColors = atoms_useJMOLColors,
atoms_useJMOLColors = atoms_useJMOLColors,
atoms_usePYMOLColors = atoms_usePYMOLColors,
atoms_implicitHydrogens_2D = atoms_implicitHydrogens_2D,
atoms_displayTerminalCarbonLabels_2D = atoms_displayTerminalCarbonLabels_2D,
atoms_displayAllCarbonLabels_2D = atoms_displayAllCarbonLabels_2D,
bonds_display = bonds_display,
bonds_width_2D = bonds_width_2D,
bonds_saturationWidth_2D = bonds_saturationWidth_2D,
bonds_ends_2D = bonds_ends_2D,
bonds_useJMOLColors = bonds_useJMOLColors,
bonds_usePYMOLColors = bonds_usePYMOLColors,
bonds_wedgeThickness_2D = bonds_wedgeThickness_2D,
bonds_hashWidth_2D = bonds_hashWidth_2D
)
#modify JSON serialization
attr(x, 'TOJSON_ARGS') <- list(dataframe=c("rows"))
# create widget
htmlwidgets::createWidget(
name = 'chemdoodle_viewer',
x = x,
width = width,
height = height,
package = 'chemdoodle',
sizingPolicy = htmlwidgets::sizingPolicy(
viewer.padding = 0,
viewer.paneHeight = 500,
browser.fill = TRUE)
)
}
chemdoodle_viewer(mjson)
chemdoodle_viewer(mjson, width = 100, height = 100)
unlink(fn)
m <- load.molecules("http://drugcentral.org/drug/1878/molfile")
mjson <- process_molecule(m[[1]])
chemdoodle_viewer(mjson, width = 100, height = 100)
chemdoodle_viewer(mjson, width = 300, height = 300)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_usePYMOLColors = T)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 10)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 9)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 9, scale = 2)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 9, scale = 5)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 9, bondscale = 1)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D = 9, bondscale = 20)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =10, bondscale = 20)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =10, bondscale = 40)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 40)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 45)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 50)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 80)
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 40)
m <- load.molecules("http://drugcentral.org/drug/1205/molfile")
mjson <- process_molecule(m[[1]])
chemdoodle_viewer(mjson, width = 300, height = 300, atoms_useJMOLColors = T, bonds_useJMOLColors = T, atoms_font_size_2D =14, bondscale = 40)
?tempfile()
?grepl
q()
update.packages()
update.packages()
q()
install.packages("XML")
library(RSQLite)
install.packages("RSQLite")
library(readxl)
install.packages("readxl")
q()
0.8*357
357-0.8*357
remove.packages("xgboost")
remove.packages("xgboost")
q()
install.packages("xgboost")
q()
shiny::runApp('Documents/givaudan/fermented/fdbapp')
runApp('Documents/givaudan/fermented/fdbapp')
q()
install.packages("RMySQL")
library(RMySQL)
remove.packages("data.table")
remove.packages("data.table")
q()
install.packages("data.table")
library(data.table)
remove.packages("xgboost")
install.packages("xgboost")
library(xgboost)
library(RMySQL)
library(data.table)
conn <- dbConnect(RMySQL::MySQL(), group = "tcrd_juniper")
conn <- dbConnect(RMySQL::MySQL(), group = "tcrd_juniper")
conn <- dbConnect(RMySQL::MySQL(), dbname = "tcrd", username = "oleg", password = "qas2wer", host = "juniper", port = 3306)
dbDisconnect(conn)
?dist
x <- matrix(rnorm(100), nrow = 5)
x
dist(x)
library(RMySQL)
library(data.table)
conn <- dbConnect(RMySQL::MySQL(), dbname = "tcrd", username = "oleg", password = "qas2wer", host = "juniper", port = 3306)
protein <- dbGetQuery(conn, "select id,uniprot,sym from protein")
dbDisconnect(conn)
setDT(protein)
protein
library(RMySQL)
library(data.table)
conn <- dbConnect(RMySQL::MySQL(), dbname = "tcrd", username = "oleg", password = "qas2wer", host = "juniper", port = 3306)
protein <- dbGetQuery(conn, "select protein.id,uniprot,sym,tdl,idg2,fam from protein,target where protein.id = target.id")
dbDisconnect(conn)
setDT(protein)
protein
install.packages("vegan")
library(vegan)
data(varespec)
varespec
names(varespec)
rownames(varespec)
varespec[1:5, 1:5]
vare.dist <- vegdist(varespec)
vare.dist
rownames(vare.dist)
colnames(vare.dist)
x <- as.matrix(vare.dist)
x
x <- matrix(c(1,1,0,0,1,0,0,1,0,1,1,0), byrow = T)
x
?matrix
x <- matrix(c(1,1,0,0,1,0,0,1,0,1,1,0), nrow = 3, byrow = T)
x
dist(x, method = "binary")
as.matrix(dist(x, method = "binary"))
1 - as.matrix(dist(x, method = "binary"))
?matrix
x <- matrix(c(1,1,0,0,1,0,0,1,0,1,1,0), nrow = 3, byrow = T, dimnames = LETTERS[1:3])
source('~/.active-rstudio-document', echo=TRUE)
x
d <- dist(x, method = "binary")
d
as.numeric(d)
rownames(x)
combn(rownames(x), 2)
t(combn(rownames(x), 2))
ids <- t(combn(rownames(x), 2))
ids
dt.long <- data.table(ids, as.numeric(d))
dt.long
setnames(dt.long, colnames(dt.long), c("id1", "id2", "distance"))
dt.long <- data.table(ids, dist = as.numeric(d))
dt.long
setnames(dt.long, c("V1", "V2"), c("protein_1", "protein_2"))
dt.long
library(RMySQL)
library(data.table)
conn <- dbConnect(RMySQL::MySQL(), dbname = "tcrd", username = "oleg", password = "qas2wer", host = "juniper", port = 3306)
protein <- dbGetQuery(conn, "select protein.id,uniprot,sym,tdl,idg2,fam from protein,target where protein.id = target.id")
uniprot.dis <- dbGetQuery(conn, "select protein_id,did from disease where dtype = 'UniProt Disease'")
dbDisconnect(conn)
setDT(protein)
setDT(uniprot.dis)
uniprot.dis
dcast(uniprot.dis, protein_id ~ did, fun.aggregate = count)
length
uniprot.dis[, val := 1]
x <- dcast(uniprot.dis, protein_id ~ did, fun.aggregate = length, value.var = "val", fill = 0)
x
x[1:10, 1:10]
x[`MIM:100100` > 0, 1:10]
max(x)
max(x[, 2:ncol(x)])
which(x[, 2:ncol(x)] == 3)
uniprot.dis <- unique(uniprot.dis)
x <- dcast(uniprot.dis, protein_id ~ did, fun.aggregate = length, value.var = "val", fill = 0)
max(x[, 2:ncol(x)])
uniprot.dis <- dcast(uniprot.dis, protein_id ~ did, fun.aggregate = length, value.var = "val", fill = 0)
m <- as.matrix(uniprot.dis[, 2:ncol(uniprot.dis)])
dim(m)
rownames(m) <- uniprot.dis[, protein_id]
m[1:5, 1:5]
d <- dist(m, method = "binary")
d[1:5]
ids <- t(combn(rownames(uniprot.dis[, protein_id]), 2))
ids <- t(combn(uniprot.dis[, protein_id], 2))
ids
dt.long <- data.table(ids, uniprot_dis_tan = 1 - as.numeric(d))
dt.long
setnames(dt.long, c("V1", "V2"), c("protein_1", "protein_2"))
dt.long[uniprot_dis_tan > 0]
str(uniprot.dis)
dt.long
getwd()
d1 <- data.table(A = c(1,1,2,1), B=(3,1,5,3), val1 = rnorm(4))
d2 <- data.table(A = c(3,1,2,1), B=(1,1,7,3), val1 = rnorm(4))
d1 <- data.table(A = c(1,1,2,1), B=(3,1,5,3), val1 = rnorm(4))
library(data.table)
d1 <- data.table(A = c(1,1,2,1), B=(3,1,5,3), val1 = rnorm(4))
d1 <- data.table(A = c(1,1,2,1), B=c(3,1,5,3), val1 = rnorm(4))
d2 <- data.table(A = c(3,1,2,1), B=c(1,1,7,3), val1 = rnorm(4))
d1
d2
m <- merge(d1, d2, by.x = c("A", "B"), by.y = c("A", "B"))
m
protein
id.pairs <- t(combn(protein[, id], 2))
id.pairs[1:5]
id.pairs[1:5, 1:5]
id.pairs[1:5, 1:2]
class(id.pairs)
id.pairs <- data.table(protein_id1 = id.pairs[, 1], protein_id2 = id.pairs[, 2])
nrow(id.pairs)
id.pairs <- t(combn(protein[, id], 2))
nrow(id.pairs)
id.pairs <- data.table(protein_id1 = id.pairs[, 1], protein_id2 = id.pairs[, 2])
nrow(id.pairs)
id.pairs
protein
id.pairs <- merge(id.pairs, protein[, .(id, uniprot)], by.x = "protein_id1", by.y = "id", all.x = T)
id.pairs
id.pairs[is.na(uniprot)]
setnames(id.pairs, "uniprot", "uniprot1")
id.pairs <- merge(id.pairs, protein[, .(id, uniprot)], by.x = "protein_id2", by.y = "id", all.x = T)
nrow(protein)
setnames(id.pairs, "uniprot", "uniprot2")
id.pairs
id.pairs[protein_id1 == 1]
id.pairs[protein_id1 == 2]
dt.long <- data.table(ids, uniprot_dis_tan = 1 - as.numeric(d))
setnames(dt.long, c("V1", "V2"), c("protein_id1", "protein_id2"))
dt.long
id.pairs <- merge(id.pairs, dt.long, by.x = c("protein_id1", "protein_id2"), by.y = c("protein_id1", "protein_id2"), all.x = T, sort = F)
nrow(id.pairs)
id.pairs
id.pairs[!is.na(uniprot_dis_tan)]
id.pairs[!is.na(uniprot_dis_tan) & uniprot_dis_tan > 0]
id.pairs[!is.na(uniprot_dis_tan) & uniprot_dis_tan > 0][order(-uniprot_dis_tan)]
m <- matrix(c(1,2,3,4,NA,5,6,7,NA), byrow = T, ncol = 3)
m
dist(m, method = "euclidean")
?dist
euclid.dist <- function(x,y) {
sqrt(sum((x-y)^2))
}
euclid.dist(c(1,3),c(4,5))
euclid.dist(c(1,2,3),c(4,NA,5))
x <- c(1,3)
y <- c(4,5)
x-y
(x-y)
(x-y)^2
sum((x-y)^2)
sqrt(13)
sqrt(4)
euclid.dist(c(1,2,3), c(2,7,10))
vx <- matrix(c(1,2,3), nrow=1)
vx
vy <- matrix(c(2,7,10), nrow=1)
vy
dist(rbind(vx,vy))
vy.na <- matrix(c(2,NA,10), nrow=1)
vy.na
dist(rbind(vx,vy.na))
rbind(vx,vy.na)
?summary.anosim
?sum
q()
q()
setwd("workspace/metap/R")
q()
